name: Staged to Production Merge

on:
  push:
    branches:
      - staged  # Runs when 'staged' branch is updated
  schedule:
    - cron: "0 0 * * 0"  # Runs every Sunday at midnight UTC

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  versioning:
    name: Auto-Increment Version
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump_version.outputs.new_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Current Version
        id: get_version
        run: |
          VERSION_FILE="VERSION"
          if [ ! -f $VERSION_FILE ]; then
            echo "1.0.0" > $VERSION_FILE
          fi
          echo "CURRENT_VERSION=$(cat $VERSION_FILE)" >> $GITHUB_ENV

      - name: Bump Version
        id: bump_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.CURRENT_VERSION }}"
          NEW_VERSION="$major.$minor.$((patch + 1))"
          echo "$NEW_VERSION" > VERSION
          echo "New Version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and Push New Version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "ðŸ”– Bump version to ${{ env.new_version }}"
          git push origin staged

  create_pr:
    name: Create Pull Request to Production
    needs: versioning  # Ensure versioning completes first
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: staged
          base: production
          title: "ðŸš€ Deploy v${{ needs.versioning.outputs.version }}"
          body: "Merging latest changes from `staged` into `production`. Version: v${{ needs.versioning.outputs.version }}"
          labels: "deployment"
          reviewers: ""  # No specific reviewers needed

  auto_merge:
    name: Auto Merge PR if Approved
    needs: create_pr
    runs-on: ubuntu-latest

    steps:
      - name: Auto-approve PR
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Pull Request
        uses: pascalgn/automerge-action@v0.15.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          merge-method: merge  # Preserves commit history

  tag_release:
    name: Tag Release on Production Merge
    needs: auto_merge
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Merged Version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"
