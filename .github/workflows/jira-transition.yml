# .github/workflows/jira-transition.yml
name: Transition Jira issues on PR merge

on:
  pull_request:
    types: [closed]

jobs:
  prepare:
    # ───── Skip bot/auto branches, run only when PR actually merged ─────
    if: >
      github.event.pull_request.merged == true &&
      !startsWith(github.event.pull_request.base.ref, 'auto/') &&
      !startsWith(github.event.pull_request.base.ref, 'docs/') &&
      !startsWith(github.event.pull_request.base.ref, 'dependabot/') &&
      !startsWith(github.event.pull_request.base.ref, 'renovate/')
    runs-on: ubuntu-latest
    outputs:
      keys: ${{ steps.vars.outputs.keys }}
      transition: ${{ steps.vars.outputs.transition }}
    steps:
      - id: vars
        shell: bash
        run: |
          set -euo pipefail

          # ─── 1 Collect text to scan for Jira keys ───────────────────────
          TITLE="${{ github.event.pull_request.title }}"
          BODY="${{ github.event.pull_request.body }}"
          BRANCH="${{ github.event.pull_request.head.ref }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"

          # Include every commit subject in the PR
          git init -q
          git remote add origin "https://github.com/${{ github.repository }}"
          git fetch --quiet --depth=100 origin "${{ github.event.pull_request.head.sha }}"
          COMMITS=$(git log --pretty=%s \
                    "${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}" || true)

          TEXT="$TITLE
          $BODY
          $BRANCH
          $COMMITS"

          # ─── 2 Extract all ABC-123 patterns, dedupe, to JSON array ──────
          KEYS=$(grep -oE '[A-Z]+-[0-9]+' <<<"$TEXT" |
                 sort -u |
                 jq -R -s -c 'split("\n") - [""]')

          echo "keys=$KEYS" >>"$GITHUB_OUTPUT"

          # ─── 3 Map destination branch → Jira status ────────────────────
          case "$BASE_REF" in
            dev)                 STATUS="IN REVIEW"   ;;  # feature → dev
            staging)             STATUS="STAGING"     ;;  # dev → staging
            release/*|release)   STATUS="RELEASE"     ;;  # staging → release/*
            main)                STATUS="DONE"        ;;  # release/* → main
            *)                   STATUS="IN PROGRESS" ;;
          esac

          echo "transition=$STATUS" >>"$GITHUB_OUTPUT"

  transition:
    if: ${{ needs.prepare.outputs.keys != '[]' }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        issue: ${{ fromJson(needs.prepare.outputs.keys) }}
    steps:
      - name: 🔐 Jira login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL:   ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN:  ${{ secrets.JIRA_API_TOKEN }}

      - name: 🚚 Transition ${{ matrix.issue }} ➜ ${{ needs.prepare.outputs.transition }}
        uses: atlassian/gajira-transition@v3
        with:
          issue:      ${{ matrix.issue }}
          transition: ${{ needs.prepare.outputs.transition }}
